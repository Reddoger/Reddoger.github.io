<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reddoge&#39;s Blog</title>
  
  <subtitle>燃尽人间琉璃色</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-05T09:25:46.518Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Reddoge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对抗样本论文阅读记录概览</title>
    <link href="http://yoursite.com/2020/03/04/%E5%AF%B9%E6%8A%97%E6%A0%B7%E6%9C%AC%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95%E6%A6%82%E8%A7%88/"/>
    <id>http://yoursite.com/2020/03/04/%E5%AF%B9%E6%8A%97%E6%A0%B7%E6%9C%AC%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95%E6%A6%82%E8%A7%88/</id>
    <published>2020-03-04T12:32:37.492Z</published>
    <updated>2020-03-05T09:25:46.518Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这篇博客用于记录在Adversarial Attack and Defence领域的论文研读，希望通过记录与思考提升自己的论文理解能力，更大的愿望是希望自己在研究生期间能成为一个优秀的科研人员，能够独立思考、解决问题、获得收获、分享经验。千里之行，始于脚下。对自己总是要有一个见证的，也是对自己的一种监督，加油！</p><h4 id="论文列表"><a href="#论文列表" class="headerlink" title="论文列表"></a>论文列表</h4><h5 id="Boosting-Adversarial-Attacks-with-Momentum"><a href="#Boosting-Adversarial-Attacks-with-Momentum" class="headerlink" title="Boosting Adversarial Attacks with Momentum"></a>Boosting Adversarial Attacks with Momentum</h5><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>这是我在谷歌学术上看到的被引数很高的一篇论文，查询了之后发现是清华大学的团队发表的文章，文章被CVPR_2018接收，研读本文目的在于了解现在最前沿的对抗攻击技术，追根溯源，加深对整个领域的认识。</p><p><img src="http://q6kao6qhw.bkt.clouddn.com/qiniu_picGO/image-20200304210843547.png" alt="image-20200304210843547"></p><h6 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h6><ul><li><p>序号：1</p></li><li><p>名称：Boosting Adversarial Attacks with Momentum</p></li><li><p>年份：2018</p></li><li><p>文章类型：方法性文章</p></li><li><p>关键部分：1、攻击方法 2、攻击成功率  3、同时攻击多个模型的整体方法  4、对于局部最大值的优化方法</p></li><li><p>方法：实验/对比/优化</p></li><li><p>存在问题/引出论述：对抗性攻击是评估深度学习模型部署之前的鲁棒性的重要替代方法。但是，大多数现的对抗攻击只能成功率较低地攻击黑匣子模型。  为了解决这个问题，本文提出了一大类基于动量的迭代算法来增强对抗性攻击。通过将动量项整合到迭代的攻击过程中，本文的方法可以稳定更新方向并在迭代过程中摆脱不良的局部最大值，从而得出更具可传递性的对抗性样本。为了进一步提高黑盒攻击的成功率，我们将动量迭代算法应用于一组模型，并表明经过对抗训练具有强大防御能力的的模型也容易受到我们的黑盒攻击的攻击。  </p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;这篇博客用于记录在Adversarial Attack and Defence领域的论文研读，希望通过记录与思考提升自己的论
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode刷题记录</title>
    <link href="http://yoursite.com/2020/03/04/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/03/04/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-04T12:32:22.848Z</published>
    <updated>2020-03-04T12:32:22.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以前总是觉得自己代码能力很弱，但是其实本科的时候程序语言方面的课程却是我均分最高的课程，对自己否定多了导致自己开始有些不自信起来，看论文总是觉得自己原理能懂，但是要看代码的时候就是头疼。后来想练练自己的代码能力吧，但是总是学完一门语言就没有什么能用的地方。有幸在搭建博客的时候，看到各位有在博客里面写到自己刷LeetCode的过程，慢慢接触到了LeetCode，在上面零零散散做了几道题了，但是印象都不是很深刻，还是专门开一个文章来记录自己刷题的过程吧，希望两年后，真的能很自信的说自己代码能力强了。</p><h3 id="两数字之和"><a href="#两数字之和" class="headerlink" title="两数字之和"></a>两数字之和</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line"></span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1、用两层循环进行解题，不过提交结果后提示 “超出时间限制”，这里就不使用了。</p><p>2、解题思路是在方法一的基础上，优化解法。想着，num2 的查找并不需要每次从 nums 查找一遍，只需要从 num1 位置之前或之后查找即可。但为了方便 index 这里选择从 num1 位置之前查找，我运行使用了28ms：</p><p>Python3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def twoSum(nums, target):</span><br><span class="line">    lens &#x3D; len(nums)</span><br><span class="line">    j&#x3D;-1</span><br><span class="line">    for i in range(1,lens):</span><br><span class="line">        temp &#x3D; nums[:i] #从nums的地方进行查找，1st:[2,7,11,15] &#x3D;&gt; [2,7]</span><br><span class="line">        if (target - nums[i]) in temp: # 9-2 &#x3D; 7 &#x3D;&gt; True</span><br><span class="line">            j &#x3D; temp.index(target - nums[i]) # j&#x3D;1(索引)</span><br><span class="line">            break #跳出循环</span><br><span class="line">    if j&gt;&#x3D;0: #如果存在，返回[j,i]</span><br><span class="line">        return [j,i]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def twoSum(nums, target):</span><br><span class="line">    hashmap&#x3D;&#123;&#125;</span><br><span class="line">    for i,num in enumerate(nums):</span><br><span class="line">        if hashmap.get(target - num) is not None:</span><br><span class="line">            return [i,hashmap.get(target - num)]</span><br><span class="line">        hashmap[num] &#x3D; i #这句不能放在if语句之前，解决list中有重复值或target-num&#x3D;num的情况</span><br></pre></td></tr></table></figure><p>C++：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        map&lt;int,int&gt; a;&#x2F;&#x2F;提供一对一的hash</span><br><span class="line">        vector&lt;int&gt; b(2,-1);&#x2F;&#x2F;用来承载结果，初始化一个大小为2，值为-1的容器b</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a.count(target-nums[i])&gt;0)</span><br><span class="line">            &#123;</span><br><span class="line">                b[0]&#x3D;a[target-nums[i]];</span><br><span class="line">                b[1]&#x3D;i;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            a[nums[i]]&#x3D;i;&#x2F;&#x2F;反过来放入map中，用来获取结果下标</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;以前总是觉得自己代码能力很弱，但是其实本科的时候程序语言方面的课程却是我均分最高的课程，对自己否定多了导致自己开始有些不自信
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>诗酒趁年华</title>
    <link href="http://yoursite.com/2020/02/28/%E8%AF%97%E9%85%92%E8%B6%81%E5%B9%B4%E5%8D%8E/"/>
    <id>http://yoursite.com/2020/02/28/%E8%AF%97%E9%85%92%E8%B6%81%E5%B9%B4%E5%8D%8E/</id>
    <published>2020-02-28T15:23:34.000Z</published>
    <updated>2020-03-01T09:31:45.335Z</updated>
    
    <content type="html"><![CDATA[<h5 id="欢迎来到我的第一篇博客。"><a href="#欢迎来到我的第一篇博客。" class="headerlink" title="欢迎来到我的第一篇博客。"></a>欢迎来到我的第一篇博客。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;欢迎来到我的第一篇博客。&quot;&gt;&lt;a href=&quot;#欢迎来到我的第一篇博客。&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的第一篇博客。&quot;&gt;&lt;/a&gt;欢迎来到我的第一篇博客。&lt;/h5&gt;
      
    
    </summary>
    
    
    
      <category term="Chatting" scheme="http://yoursite.com/tags/Chatting/"/>
    
  </entry>
  
</feed>
